<?php/** * * * @version $Id$ * @copyright 2008 */Class CheckForm {    protected $arrInputData;    protected $arrException;    protected $arrInput;    protected $arrResult;    protected $intErrorCount;    protected $arrCheckFieldReturn;    function __construct($arrInput=""){        if (is_array($arrInput)) {            $this->SetData($arrInput);        }        $this->Initialize();    }    function Initialize(){        $this->ErrorTextPrefix="ErrorText_";        $this->ErrorStatePrefix="ErrorState_";        $this->ErrorStylePrefix="Error_";        $this->ErrorStyle="ErrorText";        if (isset($this->arrErrorState)) {            unset($this->arrErrorState);        }        if (isset($this->arrCheckFieldReturn)) {            unset($this->arrCheckFieldReturn);        }        $this->intErrorCount=0;    }    function SetParams($strKey,$strValue){        $this->$strKey=$strValue;    }    // ******************************** Daten vorbereiten  ********************************    function SetData($arrInput,$arrException=array()){        if (is_array($arrInput)) {            // Vorhandene Daten löschen            if (isset($this->arrErrorState) AND is_array($this->arrErrorState)) {                unset($this->arrErrorState);            }            if (isset($this->arrCheckFieldReturn) AND is_array($this->arrCheckFieldReturn)) {                unset($this->arrCheckFieldReturn);            }            $this->intErrorCount=0;            foreach ($arrInput as $key=>$value) {                $value=str_replace('\\','',$value);                if (count($arrException)>0 AND !in_array($key, $arrException)) {                    $this->arrInputData[$key]=stripslashes($value);                }else{                    $this->arrInputData[$key]=$value;                }            }        }    }    // ******************************** HTML-Sicher machen  ********************************    function HTMLSafe($arrException=array()) {        if (is_array($this->arrInputData)) {            foreach ($this->arrInputData as $key=>$value) {                $value=str_replace('\\','',$value);                if (!in_array($key, $arrException)) {                    if (get_magic_quotes_gpc()) {                        if (!is_array($value)) {                            $value=stripcslashes($value);                        }else{                            $value=$value;                        }                    }                    if (!is_array($value)) {                        $arrResult[$key]=htmlspecialchars($value,ENT_QUOTES,CHARSET,FALSE);                        }else{                            $arrResult[$key]=$value;                        }                }else{                    if (get_magic_quotes_gpc()===TRUE) {                        if (!is_array($value)) {                            $value=stripslashes($value);                        }else{                            $value=$value;                        }                    }                    $arrResult[$key]=$value;                }            }        }        return $arrResult;    }    // ******************************** HTML-Tags entfernen  ********************************    function StripHTML($arrException=array()) {        if (is_array($his->arrInputData)) {            foreach ($his->arrInputData as $key=>$value) {                if (!in_array($key, $arrException)) {                    $arrResult[$key]=strip_tags($value);                }else{                    $arrResult[$key]=$value;                }            }        }        return $arrResult;    }    // ******************************** HTML-Sicher machen  ********************************    function MakeHTMLSafe($arrData,$arrException=array()) {        if (is_array($arrData)) {            foreach ($arrData as $key=>$value) {                if (!in_array($key, $arrException)) {                    if (get_magic_quotes_gpc()) {                        $value=stripcslashes($value);                    }                    if (!is_array($value)) {                        $arrResult[$key]=htmlspecialchars($value,ENT_QUOTES,CHARSET,FALSE);                    }else{                        $arrResult[$key]=$this->MakeHTMLSafe($value,$arrException);                    }                }else{                    if (get_magic_quotes_gpc()) {                        $value=stripcslashes($value);                    }                    $arrResult[$key]=$value;                }            }        }else{            if (get_magic_quotes_gpc()) {                $arrData=stripslashes($arrData);            }            $arrResult=htmlspecialchars($arrData,ENT_QUOTES,CHARSET,FALSE);        }        return $arrResult;    }    // ******************************** HTML-Tags entfernen  ********************************    function MakeStripHTML($arrData,$arrException=array()) {        if (is_array($arrData)) {            foreach ($arrData as $key=>$value) {                if (!in_array($key, $arrException)) {                    $arrResult[$key]=strip_tags($value);                }else{                    $arrResult[$key]=$value;                }            }        }        return $arrResult;    }    // ******************************** Datensatz  prüfen  ********************************    function CheckField($strFieldName,$arrCheckParams) {        // $strCheckFuntion     = Prüffunktion        // $strCheckValue         = Prüfwerte        // arrReturn:            = Fehlertext        // Prüffunktionen durchlaufen        foreach ($arrCheckParams as $strCheckFuntion) {            $NULL=False;            // Initialisieren            if (isset($arrResult)) {                unset($arrResult);            }            if (isset($this->arrErrorState[$strFieldName]) AND $this->arrErrorState[$strFieldName]===False) {                $this->intErrorCount--;            }            if (isset($this->arrErrorState[$strFieldName])) {                unset($this->arrErrorState[$strFieldName]);            }            $ValuesExist=False;            // Prüfkriterien angegeben?            if (eregi("[:]",$strCheckFuntion)) {                $arrValue=explode(":",$strCheckFuntion);                $strCheckFuntion=$arrValue[0];                $strCheckValue=$arrValue[1];                $ValuesExist=True;            }            // Die Prüffunktion existiert nicht            if (!method_exists($this,$strCheckFuntion)) {                $arrResult["ErrorText"]="Prüffunktion '$strCheckFuntion' nicht vorhanden!";                $arrResult["Result"]=False;                // Wert prüfen            }else{                // Funktion hat Prüfwerte                if ($ValuesExist===True) {                    $arrResult=$this->$strCheckFuntion($this->arrInputData[$strFieldName],$strCheckValue);                    // Funktion hat keine Prüfwerte                }else{                    $arrResult=$this->$strCheckFuntion($this->arrInputData[$strFieldName]);                }            }            // Keine weiteren Prüfungen ausführen (ErrorText = NULL, Result=True)            if ($arrResult["ErrorState"]===False AND $arrResult["ErrorText"]==="NULL") {                $arrResult["ErrorText"]=False;                $arrResult["ErrorText"]="";                $NULL=True;            }            $this->arrCheckFieldReturn[$this->ErrorTextPrefix.$strFieldName]=$arrResult["ErrorText"];            $this->arrCheckFieldReturn[$this->ErrorStatePrefix.$strFieldName]=$arrResult["ErrorState"];            if ($arrResult["ErrorState"]===True) {                $this->arrCheckFieldReturn[$this->ErrorStylePrefix.$strFieldName]=$this->ErrorStyle;                $this->intErrorCount++;                @$this->arrErrorState[$strFieldName]===True;            }else{                $this->arrCheckFieldReturn[$this->ErrorStylePrefix.$strFieldName]="";            }            /*               echo "<p><b>$strCheckFuntion</b><br>";               echo $arrResult["ErrorText"]."<br>";               echo $arrResult["Result"]."<br>";               echo "</p>";            */            // Funktion liefert fehlerhaftes Feld - also Prüfunge beenden            if ($arrResult["ErrorState"]===True) {                break;            }            // Funktion liefert NULL - also Prüfunge beenden            if ($arrResult["ErrorState"]===False AND $arrResult["ErrorText"]==="NULL") {                break;            }            if ($NULL===True) {                break;            }        }    }    // ******************************** Fehlerstatus zurückgeben  ********************************    function isError(){        if ($this->intErrorCount>0) {            return true;        }else{            return false;        }    }    function Errors(){        return $this->intErrorCount;    }    function CheckForm($replace=true){        if ($replace===TRUE) {            foreach ($this->arrCheckFieldReturn as $Key=>$Value){                if (eregi('^ErrorText_(.*)',$Key,$regs)) {                    if (defined($Key) AND $this->arrCheckFieldReturn['ErrorState_'.$regs[1]]==1) {                        $this->arrCheckFieldReturn[$Key]=constant($Key);                    }                }            }        }        return $this->arrCheckFieldReturn;    }    // ********************************************************************************    // *                                Prüffunktionen                                *    // ********************************************************************************    // ******************************** Länge  prüfen  ********************************    // Max. Stringlänge    function maxlength($Data,$Params="NULL") {        if ($Params!="NULL") {            if (strlen($Data)<=$Params) {                $arrReturn["ErrorText"]="";                $arrReturn["ErrorState"]=False;            }else{                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_0.$Params.LANGUAGE_STRING_CHECK_1;                $arrReturn["ErrorState"]=True;            }            Return $return;        }else{            $this->ErrorText="<font color='#ff0000'>".LANGUAGE_STRING_CHECK_2."</font>";            $arrReturn["ErrorState"]=True;        }        return $arrReturn;    }    // Min. Stringlänge    function minlength($Data,$Params="NULL") {        if ($Params!="NULL") {            if (strlen($Data)>=$Params) {                $arrReturn["ErrorText"]="";                $arrReturn["ErrorState"]=False;            }else{                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_6.$Params.LANGUAGE_STRING_CHECK_7;                $arrReturn["ErrorState"]=True;            }        }else{            $arrReturn["ErrorText"]="<font color='#ff0000'>".LANGUAGE_STRING_CHECK_8."</font>";            $arrReturn["ErrorState"]=True;        }        return $arrReturn;    }    // ******************************** Werte  prüfen  ********************************    // Max. Wertgröße    function max($Data,$Params="NULL") {        if ($Params!="NULL") {            if ($Data>$Params) {                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_9.$Params.LANGUAGE_STRING_CHECK_10;                $arrReturn["ErrorState"]=True;            }else{                $arrReturn["ErrorText"]="";                $arrReturn["ErrorState"]=False;            }            Return $arrReturn;        }else{            $arrReturn["ErrorText"]="<font color='#ff0000'>".LANGUAGE_STRING_CHECK_11."</font>";            $arrReturn["ErrorState"]=True;        }    }    // Min. Wertgröße    function min($Data,$Params="NULL") {        if ($Params!="NULL") {            if ($Data<$Params) {                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_3.$Params.LANGUAGE_STRING_CHECK_4;                $arrReturn["ErrorState"]=True;            }else{                $arrReturn["ErrorText"]="";                $arrReturn["ErrorState"]=False;            }            Return $arrReturn;        }else{            $arrReturn["ErrorText"]="<font color='#ff0000'>".LANGUAGE_STRING_CHECK_5."</font>";            $arrReturn["ErrorState"]=True;        }    }    // ******************************** Datum prüfen  ********************************    function datum($Data) {        // Deutsches Datum?        if (eregi("^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{2,4}$",$Data)) {            // Daten für Prüfunge erzeugen            $Date=explode(".",$Data);            $Monat=$Date[1];            $Tag=$Date[0];            $Jahr=$Date[2];        }        // Amerikanisches Datum?        if (eregi("^[0-9]{2,4}-[0-9]{1,2}-[0-9]{2,4}$",$Data)) {            // Daten für Prüfunge erzeugen            $Date=explode("-",$Data);            $Monat=$Date[1];            $Tag=$Date[2];            $Jahr=$Date[0];        }        if (strlen($Jahr)<>2 AND strlen($Jahr)<>4) {            unset($Date);        }        // Datum erkannt?        if (isset($Date)) {            // Richtige Anzahl Werte            if (count($Date)==3) {                // Datum prüfen                $return=checkdate($Monat,$Tag,$Jahr);                if ($return!=1) {                    $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_12;                    $arrReturn["ErrorState"]=True;                }                $arrReturn["ErrorText"]="";                $arrReturn["ErrorState"]=False;            }        }else{            // Kein korrektes Datumsformat            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_12;            $arrReturn["ErrorState"]=True;        }        return $arrReturn;    }    // *************************** Feld darf nicht leer sein **************************    function notnull($Data) {        if (empty($Data)) {            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_13;            $arrReturn["ErrorState"]=True;        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    // ***************************** Feld darf leer sein ****************************    function null($Data) {        if (empty($Data) OR $Data=="0000-00-00") {            $arrReturn["ErrorText"]="NULL";            $arrReturn["ErrorState"]=False;        }        return $arrReturn;    }    // *************************** Postleitzahl prüfen *****************************    function postleitzahl($Data) {        if (eregi("^[0-9]{5}$",$Data)) {            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }else{            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_14;            $arrReturn["ErrorState"]=True;        }        Return $arrReturn;    }    // *************************** Auf Zahlen  prüfen *****************************    function zahlen($Data) {        if (is_numeric($Data)) {            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }else{            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_15;            $arrReturn["ErrorState"]=True;        }        Return $arrReturn;    }    // *************************** Auf Telefonnummer  prüfen *****************************    function telefonnummer($Data) {        if (eregi("[^0-9 -/\+]",$Data)) {            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_16;            $arrReturn["ErrorState"]=True;        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    // *************************** Auf Buchstaben  prüfen *****************************    function buchstaben($Data) {        if (!eregi("^[a-z]*$",$Data) AND !empty($Data)) {            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_17;            $arrReturn["ErrorState"]=True;        }else{            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    // ******************************* Text prüfen *********************************    function text($Data) {        if (eregi("[^0-9a-z_/ !\.,&()\'\"\-äöüß]",$Data)) {            $strRegErrors=trim(eregi_replace("[0-9a-z_/ !\.,&()\'\"\-äöüß]","",$Data));            //$strRegErrors=implode(",",$arrRegErrors);            if (strlen($strRegErrors)>1) {                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_18.$strRegErrors.LANGUAGE_STRING_CHECK_19;                $arrReturn["ErrorState"]=True;            }else{                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_20.$strRegErrors.LANGUAGE_STRING_CHECK_21;                $arrReturn["ErrorState"]=True;            }        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    // ******************************* SMS prüfen *********************************    function smstext($Data) {        if (eregi("[^0-9a-z_/ !\?.,()-äöüß]",$Data)) {            $strRegErrors=trim(eregi_replace("[0-9a-z_/ !?\.,()-äöüß]","",$Data));            //$strRegErrors=implode(",",$arrRegErrors);            if (strlen($strRegErrors)>1) {                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_18.$strRegErrors.LANGUAGE_STRING_CHECK_19;                $arrReturn["ErrorState"]=True;            }else{                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_20.$strRegErrors.LANGUAGE_STRING_CHECK_21;                $arrReturn["ErrorState"]=True;            }        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    // ******************************** Uhrzeit prüfen *******************************    function uhrzeit($Data) {        if (eregi("^[0-9]{2}\:[0-9]{2}(\:[0-9]{1,2}){0,1}$",$Data)) {            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }else{            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_22;            $arrReturn["ErrorState"]=True;        }        Return $arrReturn;    }    // ******************************** E-Mail prüfen *******************************    function email($Data) {        if ($this->is_valid_email_address($Data)) {            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }else{            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_23;            $arrReturn["ErrorState"]=True;        }        Return $arrReturn;    }    function is_valid_email_address($email){        ####################################################################################        #        # NO-WS-CTL       =       %d1-8 /         ; US-ASCII control characters        #                         %d11 /          ;  that do not include the        #                         %d12 /          ;  carriage return, line feed,        #                         %d14-31 /       ;  and white space characters        #                         %d127        # ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z        # DIGIT          =  %x30-39        $no_ws_ctl    = "[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]";        $alpha        = "[\\x41-\\x5a\\x61-\\x7a]";        $digit        = "[\\x30-\\x39]";        $cr        = "\\x0d";        $lf        = "\\x0a";        $crlf        = "($cr$lf)";        ####################################################################################        #        # obs-char        =       %d0-9 / %d11 /          ; %d0-127 except CR and        #                         %d12 / %d14-127         ;  LF        # obs-text        =       *LF *CR *(obs-char *LF *CR)        # text            =       %d1-9 /         ; Characters excluding CR and LF        #                         %d11 /        #                         %d12 /        #                         %d14-127 /        #                         obs-text        # obs-qp          =       "\" (%d0-127)        # quoted-pair     =       ("\" text) / obs-qp        $obs_char    = "[\\x00-\\x09\\x0b\\x0c\\x0e-\\x7f]";        $obs_text    = "($lf*$cr*($obs_char$lf*$cr*)*)";        $text        = "([\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f]|$obs_text)";        $obs_qp        = "(\\x5c[\\x00-\\x7f])";        $quoted_pair    = "(\\x5c$text|$obs_qp)";        ####################################################################################        #        # obs-FWS         =       1*WSP *(CRLF 1*WSP)        # FWS             =       ([*WSP CRLF] 1*WSP) /   ; Folding white space        #                         obs-FWS        # ctext           =       NO-WS-CTL /     ; Non white space controls        #                         %d33-39 /       ; The rest of the US-ASCII        #                         %d42-91 /       ;  characters not including "(",        #                         %d93-126        ;  ")", or "\"        # ccontent        =       ctext / quoted-pair / comment        # comment         =       "(" *([FWS] ccontent) [FWS] ")"        # CFWS            =       *([FWS] comment) (([FWS] comment) / FWS)        #        # note: we translate ccontent only partially to avoid an infinite loop        # instead, we'll recursively strip comments before processing the input        #        $wsp        = "[\\x20\\x09]";        $obs_fws    = "($wsp+($crlf$wsp+)*)";        $fws        = "((($wsp*$crlf)?$wsp+)|$obs_fws)";        $ctext        = "($no_ws_ctl|[\\x21-\\x27\\x2A-\\x5b\\x5d-\\x7e])";        $ccontent    = "($ctext|$quoted_pair)";        $comment    = "(\\x28($fws?$ccontent)*$fws?\\x29)";        $cfws        = "(($fws?$comment)*($fws?$comment|$fws))";        $cfws        = "$fws*";        ####################################################################################        #        # atext           =       ALPHA / DIGIT / ; Any character except controls,        #                         "!" / "#" /     ;  SP, and specials.        #                         "$" / "%" /     ;  Used for atoms        #                         "&" / "'" /        #                         "*" / "+" /        #                         "-" / "/" /        #                         "=" / "?" /        #                         "^" / "_" /        #                         "`" / "{" /        #                         "|" / "}" /        #                         "~"        # atom            =       [CFWS] 1*atext [CFWS]        $atext        = "($alpha|$digit|[\\x21\\x23-\\x27\\x2a\\x2b\\x2d\\x2f\\x3d\\x3f\\x5e\\x5f\\x60\\x7b-\\x7e])";        $atom        = "($cfws?$atext+$cfws?)";        ####################################################################################        #        # qtext           =       NO-WS-CTL /     ; Non white space controls        #                         %d33 /          ; The rest of the US-ASCII        #                         %d35-91 /       ;  characters not including "\"        #                         %d93-126        ;  or the quote character        # qcontent        =       qtext / quoted-pair        # quoted-string   =       [CFWS]        #                         DQUOTE *([FWS] qcontent) [FWS] DQUOTE        #                         [CFWS]        # word            =       atom / quoted-string        $qtext        = "($no_ws_ctl|[\\x21\\x23-\\x5b\\x5d-\\x7e])";        $qcontent    = "($qtext|$quoted_pair)";        $quoted_string    = "($cfws?\\x22($fws?$qcontent)*$fws?\\x22$cfws?)";        $word        = "($atom|$quoted_string)";        ####################################################################################        #        # obs-local-part  =       word *("." word)        # obs-domain      =       atom *("." atom)        $obs_local_part    = "($word(\\x2e$word)*)";        $obs_domain    = "($atom(\\x2e$atom)*)";        ####################################################################################        #        # dot-atom-text   =       1*atext *("." 1*atext)        # dot-atom        =       [CFWS] dot-atom-text [CFWS]        $dot_atom_text    = "($atext+(\\x2e$atext+)*)";        $dot_atom    = "($cfws?$dot_atom_text$cfws?)";        ####################################################################################        #        # domain-literal  =       [CFWS] "[" *([FWS] dcontent) [FWS] "]" [CFWS]        # dcontent        =       dtext / quoted-pair        # dtext           =       NO-WS-CTL /     ; Non white space controls        #        #                         %d33-90 /       ; The rest of the US-ASCII        #                         %d94-126        ;  characters not including "[",        #                                         ;  "]", or "\"        $dtext        = "($no_ws_ctl|[\\x21-\\x5a\\x5e-\\x7e])";        $dcontent    = "($dtext|$quoted_pair)";        $domain_literal    = "($cfws?\\x5b($fws?$dcontent)*$fws?\\x5d$cfws?)";        ####################################################################################        #        # local-part      =       dot-atom / quoted-string / obs-local-part        # domain          =       dot-atom / domain-literal / obs-domain        # addr-spec       =       local-part "@" domain        $local_part    = "($dot_atom|$quoted_string|$obs_local_part)";        $domain        = "($dot_atom|$domain_literal|$obs_domain)";        $addr_spec    = "($local_part\\x40$domain)";        #        # we need to strip comments first (repeat until we can't find any more)        #        $done = 0;        while(!$done){            $new = preg_replace("!$comment!", '', $email);            if (strlen($new) == strlen($email)){                $done = 1;            }            $email = $new;        }        #        # now match what's left        #        return preg_match("!^$addr_spec$!", $email) ? 1 : 0;    }    // ******************************** WWW  prüfen *******************************    function www($Data) {        if (eregi('(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://){0,1}|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{0,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?',$Data)) {            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }else{            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_24;            $arrReturn["ErrorState"]=True;        }        Return $arrReturn;    }    // ******************************** URL  prüfen *******************************    function url($Data) {        if (eregi('(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?',$Data)) {            $www_return=True;        }else{            $www_return=False;        }        if (eregi("^[a-z0-9]+([-_\.]?[a-z0-9])+@[a-z0-9|ü|ä|ö]+([-_\.]?[a-z0-9|ü|ä|ö])+\.[a-z]{2,4}",$Data)) {            $mail_return=True;        }else{            $mail_return=False;        }        if ($mail_return==true or $www_return==true) {            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }else{            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_25;            $arrReturn["ErrorState"]=True;        }        Return $arrReturn;    }    // ******************************** Existenz einer Datei prüfen *******************************    function fileexist($Data) {        if (file_exists($Data)) {            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_26.$Data.LANGUAGE_STRING_CHECK_27;            $arrReturn["ErrorState"]=10;        }else{            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_28.$Data.LANGUAGE_STRING_CHECK_29;            $arrReturn["ErrorState"]=20;        }        Return $arrReturn;    }    // ******************************** Auf Array prüfen *******************************    function isarray($Data) {        if (!is_array($Data)) {            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_30;            $arrReturn["ErrorState"]=True;        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    // ******************************** Array min. x Einträge *******************************    function array_min($Data,$Params="NULL") {        if ($Params!="NULL") {            if (!is_array($Data) OR count($Data)<$Params) {                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_3.$Params.LANGUAGE_STRING_CHECK_4;                $arrReturn["ErrorState"]=True;            }else{                $arrReturn["ErrorText"]="";                $arrReturn["ErrorState"]=False;            }            Return $arrReturn;        }else{            $arrReturn["ErrorText"]="<font color='#ff0000'>".LANGUAGE_STRING_CHECK_5."</font>";            $arrReturn["ErrorState"]=True;        }    }    // ******************************** Array max. x Einträge *******************************    function array_max($Data,$Params="NULL") {        if ($Params!="NULL") {            if (!is_array($Data) OR count($Data)>$Params) {                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_9.$Params.LANGUAGE_STRING_CHECK_10;                $arrReturn["ErrorState"]=True;            }else{                $arrReturn["ErrorText"]="";                $arrReturn["ErrorState"]=False;            }            Return $arrReturn;        }else{            $arrReturn["ErrorText"]="<font color='#ff0000'>".LANGUAGE_STRING_CHECK_5."</font>";            $arrReturn["ErrorState"]=True;        }    }    // ******************************** Strings gleich *******************************    function equal($Data,$Check) {        $arrData=explode(",",$Check );        if ($arrData[0]!=$arrData[1]) {            if (empty($arrData[2])) {                $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_31;            }else{                $arrReturn["ErrorText"]=$arrData[2];            }            $arrReturn["ErrorState"]=True;        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    // ******************************** Regexp *******************************    function regexpi($Data,$Check) {        if (!eregi($Check,$Data,$regs)) {            //$arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_20.implode(",",$regs).LANGUAGE_STRING_CHECK_21;            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_35;            $arrReturn["ErrorState"]=True;        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }    function regexp($Data,$Check) {        if (!ereg($Check,$Data,$regs)) {            //$arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_20.implode(",",$regs).LANGUAGE_STRING_CHECK_21;            $arrReturn["ErrorText"]=LANGUAGE_STRING_CHECK_35;            $arrReturn["ErrorState"]=True;        }else{            $arrReturn["ErrorText"]="";            $arrReturn["ErrorState"]=False;        }        Return $arrReturn;    }}?>